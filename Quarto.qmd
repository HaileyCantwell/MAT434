---
title: Analytics Report
author: 
  - name: Hailey Cantwell
    email: hailey.cantwell@snhu.edu
    affiliations: 
      - name: Southern New Hampshire University
format: html
date: 1/8/2024
date-modified: today
date-format: long
theme: night
toc: true
---

## Working With Data

### Loading data

```{r}
#| message: false
#| code-fold: true 
library(tidyverse)
library(tidymodels)
library(skimr)


hits <- read_csv("https://raw.githubusercontent.com/agmath/agmath.github.io/refs/heads/master/data/classification/battedballs.csv")
parks <- read_csv("https://raw.githubusercontent.com/agmath/agmath.github.io/refs/heads/master/data/classification/park_dimensions.csv")
```

You can add options to executable code like this

```{r}
head(hits)

hits |>
  head()
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
parks |>
  head()
```

## joining data

```{r}
hits <- hits|>
  left_join(parks, by = c("park" = "park"))
```
We joined the `hits` and `parks` data together, to obtain a full data set with `r nrow(hits)` rows and `r ncol(hits)` columns. 

Initial explorations











Split into training and test data 

```{r}
set.seed(434)
data_splits <- initial_split(hits, 0.85, strata =is_home_run)

train <- training(data_splits)
test <- testing(data_splits)
```

## Exploratory Data Analysis 

How and why do home runs happen?

###Sometimes useful 
Filtering rows

```{r}
train %>%
  filter(is_home_run == 1)
train %>%
  filter(launch_angle >45)

train %>% 
  filter(str_detect(NAME,'FENEWAY'))
```

Selecting just a few columns 

```{r}
train %>%
  select(launch_speed, launch_angel)
```


Building new variables from old ones (*Feature Engineering*)

```{r}
train %>%
  mutate(fast_pitch = ifelse(pitch_mph > 100, "yes", "no"))
```

### Summary Statistics

Home runs...

```{r}
train %>%
  count(is_home_run) %>%
  mutate(prop = 100*n/sum(n))
```

```{r}
train %>%
  summarize(pct_hr = 100*mean (is_home_run))
```
Summarizing Lanuch Angle...

```{r}
train %>%
  filter(!is.na(launch_angle)) %>% 
  summarize (
    min_angle = min(launch_angle),
    mean_angle = mean(launch_angle),
    median_angle = median(launch_angle),
    max_angle = max(launch_angle),
    sd_angle = sd(launch_angle)
  )
```
#### Grouped Summaries 
```{r}
train %>%
  group_by(is_home_run) %>%
  filter(!is.na(launch_angle)) %>% 
  summarize (
    min_angle = min(launch_angle),
    mean_angle = mean(launch_angle),
    median_angle = median(launch_angle),
    max_angle = max(launch_angle),
    sd_angle = sd(launch_angle)
    
  )
```
Summarizing Launch Angle...
```{r}
train %>%
  filter(!is.na(launch_angle)) %>%
  summarize(
    min_angle = min(launch_angle),
    mean_angle = mean(launch_angle),
    median_angle = median(launch_angle),
    max_angle = max(launch_angle),
    sd_angle = sd(launch_angle)
  )
```
#### Grouped Summaries
```{r}
train %>%
  group_by(NAME, is_home_run) %>%
  filter(!is.na(launch_angle)) %>%
  summarize(
    min_angle = min(launch_angle),
    mean_angle = mean(launch_angle),
    median_angle = median(launch_angle),
    max_angle = max(launch_angle),
    sd_angle = sd(launch_angle)
  )
```
## Model Construction, evaluation, and tuning
Prep our data... 
```{r}
hits_for_model <- hits %>%
  mutate(is_home_run =ifelse(is_home_run == 1, "yes", "no")) %>%
  mutate(is_home_run = factor(is_home_run, levels = c("no", "yes")))

set.seed(434)
data_splits <- initial_split(hits_for_model, 0.85, strata =is_home_run)

train <- training(data_splits)
test <- testing(data_splits)

```

Fitting a model 

```{r}
dt_spec <- decision_tree() %>%
  set_engine("rpart") %>%
  set_mode("classification")

dt_rec <- recipe(is_home_run ~ launch_speed + launch_angle + pitch_mph + pitch_name + Cover, data = train) %>%
  step_impute_median(all_numeric_predictors()) %>%
  step_impute_mode(all_nominal_predictors()) %>%
  step_dummy(all_nominal_predictors())

dt_wf <- workflow() %>%
  add_model(dt_spec) %>%
  add_recipe(dt_rec)

dt_fit <- dt_wf %>%
  fit(train)
```

Let's see the model

```{r}
dt_fit %>%
  extract_fit_engine() %>%
  rpart.plot::rpart.plot()
```

Assess our model's performance...

training data...

```{r}
dt_fit %>%
  augment(train) %>%
  accuracy(is_home_run, .pred_class)
```

testing data...

```{r}
dt_fit %>%
  augment(test) %>%
  accuracy(is_home_run, .pred_class)
```

Cross validation...

```{r}
train_folds <- vfold_cv(train, v = 10, strata = is_home_run)

dt_cv_results <- dt_wf %>%
  fit_resamples(train_folds)

dt_cv_results %>%
  collect_metrics()
```


tuning our model...

```{r}
dt_spec <- decision_tree(tree_depth = tune()) %>%
  set_engine("rpart") %>%
  set_mode ("classification")

dt_wf <- workflow() %>%
  add_model(dt_spec) %>%
  add_recipe(dt_rec)

dt_tune_results <- dt_wf %>%
  tune_grid(
    resamples = train_folds,
    grid = 10
  )

dt_tune_results %>%
  show_best(n = 10, metric = "accuracy")
```